{"version":3,"sources":["components/Kaodashi.tsx","components/Control.tsx","hooks/useWindowSize.tsx","components/Map.tsx","App.tsx","index.tsx"],"names":["Kaodashi","props","shotting","setShotting","image","windowWidth","kaodashiRef","useRef","webcamRef","canvasRef","useEffect","current","video","ctx","getContext","drawImage","domtoimage","toBlob","then","blob","saveAs","cameraSize","head_width","cameraSizeResized","width","headPosition","heads_position","cameraPositionStyle","position","top","left","ref","style","height","mirrored","audio","videoConstraints","display","hidden","transform","src","key","alt","StyledBox","styled","other","Box","flexFlow","right","borderRadius","backgroundColor","Control","takeScreenShot","IconButton","color","onClick","useWindowSize","isWindowClient","window","useState","innerWidth","innerHeight","undefined","windowSize","setWindowSize","setSize","addEventListener","removeEventListener","Map","allImages","setImage","latitude","longitude","zoom","viewport","setViewport","Object","assign","onViewportChange","bottom","mapStyle","map","i","offsetLeft","offsetTop","App","pickedImage","URLSearchParams","document","location","search","substring","get","data","Math","floor","random","length","pickRandomImage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.96c30d3e.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nimport Webcam from 'react-webcam';\nimport domtoimage from 'dom-to-image';\nimport { saveAs } from 'file-saver';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\n\nimport Image from '../types/Image';\n\ninterface Props {\n  shotting: boolean\n  setShotting: (shotting: boolean) => void\n  image: Image\n  windowWidth: number\n}\n\nfunction Kaodashi(props: Props) {\n  const {\n    shotting,\n    setShotting,\n    image,\n    windowWidth,\n  } = props;\n\n  const kaodashiRef = useRef<HTMLDivElement>(null);\n  const webcamRef = useRef<Webcam & HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!shotting) {\n      return;\n    }\n    if (\n      !kaodashiRef.current\n      || !webcamRef.current || !webcamRef.current.video\n      || !canvasRef.current\n    ) {\n      return;\n    }\n    const ctx = canvasRef.current.getContext('2d');\n    ctx?.drawImage(webcamRef.current.video, 0, 0);\n    domtoimage.toBlob(kaodashiRef.current)\n      .then(blob => {\n        saveAs(blob, 'screenshot.png');\n        setShotting(false);\n      })\n\n  }, [shotting, setShotting]);\n\n  const cameraSize = image.head_width * 2;\n  const cameraSizeResized = cameraSize / image.width * windowWidth;\n  const headPosition = image.heads_position[0];\n  const cameraPositionStyle: CSSProperties = {\n    position: 'absolute',\n    top: (headPosition[1] - cameraSize / 2) / image.width * windowWidth,\n    left: (headPosition[0] - cameraSize / 2) / image.width * windowWidth,\n  }\n\n  return (\n    <div ref={kaodashiRef} style={{ height: image.height / image.width * windowWidth }}>\n      <Webcam\n        mirrored\n        audio={false}\n        videoConstraints={{ width: cameraSizeResized, height: cameraSizeResized }}\n        ref={webcamRef}\n        style={{ display: shotting ? 'none' : 'initial', ...cameraPositionStyle }}\n      />\n      <canvas\n        ref={canvasRef}\n        width={cameraSizeResized}\n        height={cameraSizeResized}\n        hidden={shotting ? false : true}\n        style={{ transform: \"scaleX(-1)\", ...cameraPositionStyle }}\n      />\n      <img\n        src={`/images/${props.image.key}.png`}\n        alt=\"ME\"\n        style={{ position: 'absolute', width: '100%' }}\n      />\n    </div>\n  )\n}\n\nexport default Kaodashi;","import React from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport { styled } from '@material-ui/core/styles';\nimport Box, { BoxProps } from '@material-ui/core/Box';\n\ninterface StyledBoxProps {\n  windowWidth: number\n}\n\ninterface Props {\n  windowWidth: number\n  takeScreenShot: () => void\n}\n\nconst StyledBox = styled(({ windowWidth, ...other }: StyledBoxProps & Omit<BoxProps, keyof StyledBoxProps>) => <Box {...other} />)({\n  display: 'flex',\n  flexFlow: 'column',\n  position: 'absolute',\n  right: 5,\n  borderRadius: 25,\n  backgroundColor: 'rgba(255, 255, 255, 0.6)',\n  top: (props: StyledBoxProps) => props.windowWidth / 2 - 48,\n});\n\nfunction Control(props: Props) {\n  const {\n    windowWidth,\n    takeScreenShot,\n  } = props;\n  return (\n    <StyledBox windowWidth={windowWidth}>\n      <IconButton color='primary' onClick={takeScreenShot}>\n        <PhotoCamera />\n      </IconButton>\n    </StyledBox>\n  )\n}\n\nexport default Control;","import { useState, useEffect } from \"react\";\n\nfunction useWindowSize() {\n    const isWindowClient = typeof window === \"object\";\n\n    const [windowSize, setWindowSize] = useState(\n        isWindowClient ? { width: window.innerWidth, height: window.innerHeight } : undefined\n    );\n\n    //👇\n    useEffect(() => {\n        //a handler which will be called on change of the screen resize\n        function setSize() {\n            setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n        }\n\n        if (isWindowClient) {\n            //register the window resize listener\n            window.addEventListener(\"resize\", setSize);\n\n            //un-register the listener\n            return () => window.removeEventListener(\"resize\", setSize);\n        }\n    }, [isWindowClient, setWindowSize]);\n    //☝️\n\n    return windowSize;\n}\n\nexport default useWindowSize;","import React, { useState } from 'react';\n\nimport RoomIcon from '@material-ui/icons/Room';\nimport ReactMapGL, { Marker } from 'react-map-gl';\n\nimport useWindowSize from '../hooks/useWindowSize';\nimport Image from '../types/Image';\n\nfunction Map(props: { image: Image, allImages: Image[], setImage: (image: Image) => void }) {\n  const { image, allImages, setImage } = props;\n  const { latitude, longitude, key } = image;\n  const windowSize = useWindowSize();\n  const [viewport, setViewport] = useState({\n    latitude,\n    longitude,\n    width: 400,\n    height: 400,\n    zoom: 7,\n  });\n  return (\n    <ReactMapGL\n      {...Object.assign(viewport, {\n        width: windowSize ? windowSize.width : 0,\n        height: windowSize ? (windowSize.height - windowSize.width + 50) : 0,\n      })}\n      onViewportChange={setViewport}\n      style={{ position: 'absolute', bottom: 0, width: '100%' }}\n      mapStyle='mapbox://styles/mapbox/streets-v11'\n    >\n      {\n        allImages.map(i => (\n          <Marker\n            latitude={i.latitude}\n            longitude={i.longitude}\n            key={i.key}\n            offsetLeft={-20}\n            offsetTop={-10}\n          >\n            {i.key === key ? <RoomIcon color='secondary' /> : <RoomIcon color='primary' onClick={() => setImage(i)} />}\n          </Marker>\n        ))\n      }\n    </ReactMapGL>\n  )\n}\n\nexport default Map;","import React, { useState, useEffect } from 'react';\n\nimport Kaodashi from './components/Kaodashi';\nimport Control from './components/Control';\nimport Map from './components/Map';\nimport useWindowSize from './hooks/useWindowSize';\nimport Image from './types/Image';\nimport data from './data.json';\n\nfunction pickRandomImage(data: Image[]) {\n  return data[Math.floor(Math.random() * Math.floor(data.length))];\n}\n\nfunction App() {\n  const [shotting, setShotting] = useState(false);\n  const [image, setImage] = useState<Image | null>(null);\n\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    const params = new URLSearchParams(document.location.search.substring(1));\n    const key = params.get('key');\n    let pickedImage;\n    if (key) {\n      for (const image of data) {\n        if (image.key === key) {\n          pickedImage = image;\n          break;\n        }\n      }\n    }\n    if (!pickedImage) {\n      pickedImage = pickRandomImage(data);\n    }\n    setImage(pickedImage);\n  }, [])\n\n  if (!image || !windowSize) {\n    return <div>Loading</div>;\n  }\n\n  return (\n    <div style={{ width: '100%' }}>\n      <Map image={image} allImages={data} setImage={setImage} />\n      <Kaodashi\n        shotting={shotting}\n        setShotting={setShotting}\n        image={image}\n        windowWidth={windowSize.width}\n      />\n      <Control\n        windowWidth={windowSize.width}\n        takeScreenShot={() => setShotting(true)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}